---
title: 'RePsychLing Kliegl, Kuschela, & Laubrock (2015)- Reduction of Model Complexity'
jupyter: julia-1.9
---

# Background

@Kliegl2015 is a follow-up to @Kliegl2011 (see also script `kwdyz11.qmd`) from an experiment looking at a variety of effects of visual cueing under four different cue-target relations (CTRs). In this experiment two rectangles are displayed (1) in horizontal orientation , (2) in vertical orientation, (3) in left diagonal orientation, or in (4) right diagonal orientation relative to a central fixation point. Subjects react to the onset of a small or a large visual target occuring at one of the four ends of the two rectangles. The target is cued validly on 70% of trials by a brief flash of the corner of the rectangle at which it appears; it is cued invalidly at the three other locations 10% of the trials each. This implies a latent imbalance in design that is not visible in the repeated-measures ANOVA, but we will show its effect in the random-effect structure and conditional modes.

There are a couple of differences between the first and this follow-up experiment, rendering it more a conceptual than a direct replication. First, the original experiment was carried out at Peking University and this follow-up at Potsdam University. Second, diagonal orientations of rectangles and large target sizes were not part of the design of @Kliegl2011.

We specify three contrasts for the four-level factor CTR that are derived from spatial, object-based, and attractor-like features of attention. They map onto sequential differences between appropriately ordered factor levels. Replicating @Kliegl2011, the attraction effect was not significant as a fixed effect, but yielded a highly reliable variance component (VC; i.e., reliable individual differences in positive and negative attraction effects cancel the fixed effect). Moreover, these individual differences in the attraction effect were negatively correlated with those in the spatial effect.

This comparison is of interest because a few years after the publication of @Kliegl2011, the theoretically critical correlation parameter (CP) between the spatial effect and the attraction effect was determined as the source of a non-singular LMM in that paper. The present study served the purpose to estimate this parameter with a larger sample and a wider variety of experimental conditions.

Here we also include two additional experimental manipulations of target size and orientation of cue rectangle. A similar analysis was reported in the parsimonious mixed-model paper [@Bates2015]; it was also used in a paper of GAMMs [@Baayen2017]. Data and R scripts of those analyses are also available in [R-package RePsychLing](https://github.com/dmbates/RePsychLing/tree/master/data/).

The analysis is based on log-transformed reaction times `lrt`, indicated by a _boxcox()_ check of model residuals. 

In this vignette we focus on the reduction of model complexity. And we start with a quote: 

“Neither the [maximal] nor the [minimal] linear mixed models are appropriate for most repeated measures analysis. Using the [maximal] model is generally wasteful and costly in terms of statiscal power for tesing hypotheses. On the other hand, the [minimal] model fails to account for nontrivial correlation among repeated measurements. This results in inflated [T]ype I error rates when non-negligible correlation does in fact exist. We can usually find middle ground, a covariance model that adequately accounts for correlation but is more parsimonious than the [maximal] model. Doing so allows us full control over [T]ype I error rates without needlessly sacrificing power.”

Stroup, W. W. (2012, p. 185). _Generalized linear mixed models: Modern concepts, methods and applica?ons._ CRC Press, Boca Raton.

# Packages

```{julia}
#| code-fold: true
#| output: false
using Arrow
using AlgebraOfGraphics
using AlgebraOfGraphics: density
using BoxCox
using CairoMakie
using CategoricalArrays
using Chain
using DataFrameMacros
using DataFrames
using MixedModels
using MixedModelsMakie
using ProgressMeter
using Random
using SMLP2023: dataset
using StatsBase

ProgressMeter.ijulia_behavior(:clear)
CairoMakie.activate!(; type="svg")
```

# Read data, compute and plot means

```{julia}
dat = DataFrame(dataset(:kkl15))
describe(dat)
```

```{julia}
dat_subj = combine(
  groupby(dat, [:Subj, :CTR]),
  nrow => :n,
  :rt => mean => :rt_m,
  :rt => (c -> mean(log, c)) => :lrt_m,
)
dat_subj.CTR = categorical(dat_subj.CTR, levels=levels(dat.CTR))
describe(dat_subj)
```

```{julia}
#| code-fold: true
#| fig-cap: Comparative boxplots of mean log response time by subject under different conditions
#| label: fig-bxpltsubjcond
boxplot(
  dat_subj.CTR.refs,
  dat_subj.lrt_m;
  orientation=:horizontal,
  show_notch=true,
  axis=(;
    yticks=(
      1:4,
      [
        "valid cue",
        "same obj/diff pos",
        "diff obj/same pos",
        "diff obj/diff pos",
      ]
    )
  ),
  figure=(; resolution=(800, 300)),
)
```

Mean of log reaction times for four cue-target relations. Targets appeared at (a) the cued position (valid) in a rectangle, (b) in the same rectangle cue, but at its other end, (c) on the second rectangle, but at a corresponding horizontal/vertical physical distance, or (d) at the other end of the second rectangle, that is $\sqrt{2}$ of horizontal/vertical distance diagonally across from the cue, that is also at larger physical distance compared to (c).

We remove the outlier subject and replot, but we model the data points in `dat` and check whether this subject appears as an outlier in the caterpillar plot of conditional modes.

```{julia}
#| code-fold: true
#| fig-cap: 'Comparative boxplots of mean log response time by subject under different conditions without outlier'
#| label: fig-bxpltsubjcond2
let dat_subj = filter(r -> r.rt_m < 510, dat_subj)
  boxplot(
    dat_subj.CTR.refs,
    dat_subj.lrt_m;
    orientation=:horizontal,
    show_notch=true,
    axis=(;
      yticks=(
        1:4,
        [
          "valid cue",
          "same obj/diff pos",
          "diff obj/same pos",
          "diff obj/diff pos",
        ]
      )
    ),
    figure=(; resolution=(800, 300)),
  )
end
```

# Setup of linear mixed model

## Contrasts

```{julia}
contrasts = Dict(
  :Subj => Grouping(),
  :CTR => SeqDiffCoding(; levels=["val", "sod", "dos", "dod"]),
  :cardinal => EffectsCoding(; levels=["cardinal", "diagonal"]),
  :size => EffectsCoding(; levels=["big", "small"])
)
```

```{julia}
m_max_rt = let
  form = @formula rt ~ 1 + CTR * size * cardinal + 
                           (1 + CTR * size * cardinal | Subj)
  fit(MixedModel, form, dat; contrasts)
end
```

```{julia}
m_cpx_rt = let
  form = @formula rt ~ 1 + CTR * size * cardinal + 
                           (1 + CTR + size + cardinal | Subj)
  fit(MixedModel, form, dat; contrasts)
end
```

## Box-Cox

```{julia}
#| eval: false
bc1 = fit(BoxCoxTransformation, m_max_rt)
```

```{julia}
bc2 = fit(BoxCoxTransformation, m_cpx_rt)
```


```{julia}
#| eval: false
boxcoxplot(bc2; conf_level=0.95)
```

Clear evidence for skew. Traditionally, we used log transforms for reaction times.  even stronger than log. We stay with log for now. Could try `1/sqrt(rt)`.

# Maximum LMM

This is the maximum LMM for the design.

```{julia}
m_max = let
  form = @formula log(rt) ~ 1 + CTR * size * cardinal + 
                           (1 + CTR * size * cardinal | Subj)
  fit(MixedModel, form, dat; contrasts)
end
```


```{julia}
issingular(m_max)
```

```{julia}
only(MixedModels.PCA(m_max))
```

```{julia}
VarCorr(m_max)
```

# Reduction strategy 1

##  Zero-correlation parameter LMM (1)

Force CPs to zero.

```{julia}
m_zcp1 = let
  form = @formula log(rt) ~ 1 + CTR * size * cardinal + 
                   zerocorr(1 + CTR * size * cardinal | Subj)
  fit(MixedModel, form, dat; contrasts)
end
```

```{julia}
issingular(m_zcp1)
```

```{julia}
only(MixedModels.PCA(m_zcp1))
```

```{julia}
VarCorr(m_zcp1)
```

## Reduced zcp LMM

Take out VC for interactions.

```{julia}
m_zcp1_rdc = let
  form = @formula log(rt) ~ 1 + CTR * size * cardinal + 
                   zerocorr(1 + CTR + size + cardinal | Subj)
  fit(MixedModel, form, dat; contrasts)
end
```

```{julia}
issingular(m_zcp1_rdc)
```

```{julia}
only(MixedModels.PCA(m_zcp1_rdc))
```

```{julia}
VarCorr(m_zcp1_rdc)
```

## Model comparison 1
Let's compare the three models.

```{julia}
gof_summary = let
  nms = [:m_zcp1_rdc, :m_zcp1, :m_max]
  mods = eval.(nms)
  lrt = MixedModels.likelihoodratiotest(m_zcp1_rdc, m_zcp1, m_cpx)
  DataFrame(;
    name = nms, 
    dof=dof.(mods),
    deviance=round.(deviance.(mods), digits=0),
    AIC=round.(aic.(mods),digits=0),
    AICc=round.(aicc.(mods),digits=0),
     BIC=round.(bic.(mods),digits=0),
    χ²=vcat(:., round.(lrt.tests.deviancediff, digits=0)),
    χ²_dof=vcat(:., round.(lrt.tests.dofdiff, digits=0)),
    pvalue=vcat(:., round.(lrt.tests.pvalues, digits=3))
  )
end
```

## Parsimonious LMM (1)

Extend zcp-reduced LMM with CPs

```{julia}
m_prm1 = let
  form = @formula log(rt) ~ 1 + CTR * size * cardinal + 
                           (1 + CTR + size + cardinal | Subj)
  fit(MixedModel, form, dat; contrasts)
end
```

```{julia}
issingular(m_prm1)
```

```{julia}
only(MixedModels.PCA(m_prm1))
```

```{julia}
VarCorr(m_prm1)
```

We note that the critical correlation parameter between spatial (`sod`) and attraction (`dod`) is now estimated at .60 -- not that close to the 1.0 boundary that caused singularity in @Kliegl2011.

## Model comparison 2

```{julia}
gof_summary = let
  nms = [:m_zcp1_rdc, :m_prm1, :m_max]
  mods = eval.(nms)
  lrt = MixedModels.likelihoodratiotest(m_prm, m_zcp, m_cpx)
  DataFrame(;
    name = nms, 
    dof=dof.(mods),
    deviance=round.(deviance.(mods), digits=0),
    AIC=round.(aic.(mods),digits=0),
    AICc=round.(aicc.(mods),digits=0),
     BIC=round.(bic.(mods),digits=0),
    χ²=vcat(:., round.(lrt.tests.deviancediff, digits=0)),
    χ²_dof=vcat(:., round.(lrt.tests.dofdiff, digits=0)),
    pvalue=vcat(:., round.(lrt.tests.pvalues, digits=3))
  )
end
```

# Reduction strategy 2

## Complex LMM
Take out interaction VCs.

```{julia}
m_cpx = let
  form = @formula log(rt) ~ 1 + CTR * size * cardinal + 
                           (1 + CTR + size + cardinal | Subj)
  fit(MixedModel, form, dat; contrasts)
end
```

## Zero-correlation parameter LMM (2)
Take out interaction VCs.

```{julia}
m_zcp2 = let
  form = @formula log(rt) ~ 1 + CTR * size * cardinal + 
                   zerocorr(1 + CTR + size + cardinal | Subj)
  fit(MixedModel, form, dat; contrasts)
end
```

## Model comparison 3

```{julia}
gof_summary = let
  nms = [:m_zcp2, :m_cpx, :m_max]
  mods = eval.(nms)
  lrt = MixedModels.likelihoodratiotest(m_zcp2, m_prm, m_cpx)
  DataFrame(;
    name = nms, 
    dof=dof.(mods),
    deviance=round.(deviance.(mods), digits=0),
    AIC=round.(aic.(mods),digits=0),
    AICc=round.(aicc.(mods),digits=0),
     BIC=round.(bic.(mods),digits=0),
    χ²=vcat(:., round.(lrt.tests.deviancediff, digits=0)),
    χ²_dof=vcat(:., round.(lrt.tests.dofdiff, digits=0)),
    pvalue=vcat(:., round.(lrt.tests.pvalues, digits=3))
  )
end
```

# Check LMM for untransformed reaction times

We see the model is singular.

```{julia}
issingular(m_cpx_rt)
```

```{julia}
MixedModels.PCA(m_cpx_rt)
```

# Other checks

```{julia}
m_prm.θ
m_prm.lowerbd
m_prm.λ
```

# Diagnostic plots of LMM residuals

Do model residuals meet LMM assumptions? Classic plots are

  - Residual over fitted
  - Quantiles of model residuals over theoretical quantiles of normal distribution

## Residual-over-fitted plot

The slant in residuals show a lower and upper boundary of reaction times, that is we have have too few short and too few long residuals. Not ideal, but at least width of the residual band looks similar across the fitted values, that is there is no evidence for heteroskedasticity.

```{julia}
#| code-fold: true
#| label: fig-m1fittedresid
#| fig-cap: Residuals versus fitted values for model m1
CairoMakie.activate!(; type="png")
scatter(fitted(m_prm1), residuals(m_prm1); alpha=0.3)
```

With many observations the scatterplot is not that informative. Contour plots or heatmaps may be an alternative.

```{julia}
#| code-fold: true
#| label: fig-m1fittedresid2
#| fig-cap: Heatmap of residuals versus fitted values for model m1
set_aog_theme!()
draw(
  data((; f=fitted(m_prm1), r=residuals(m_prm1))) *
  mapping(
    :f => "Fitted values from m1", :r => "Residuals from m1"
  ) *
  density();
)
```

## Q-Q plot

The plot of quantiles of model residuals over corresponding quantiles of the normal distribution should yield a straight line along the main diagonal.

```{julia}
#| code-fold: true
#| label: fig-qqnormm1
#| fig-cap: Quantile-quantile plot of the residuals for model m1 versus a standard normal
CairoMakie.activate!(; type="png")
qqnorm(
  residuals(m_prm1);
  qqline=:none,
  axis=(;
    xlabel="Standard normal quantiles",
    ylabel="Quantiles of the residuals from model m1",
  ),
)
```

## Observed and theoretical normal distribution

The violation of expectation is again due to the fact that the distribution of residuals is narrower than expected from a normal distribution.
We can see this in this plot.
Overall, it does not look too bad.

```{julia}
#| code-fold: true
#| label: fig-stdresidm1dens
#| fig-cap: '  Kernel density plot of the standardized residuals for model m1 versus a  standard normal'
CairoMakie.activate!(; type="svg")
let
  n = nrow(dat)
  dat_rz = (;
    value=vcat(residuals(m1) ./ std(residuals(m_prm1)), randn(n)),
    curve=repeat(["residual", "normal"]; inner=n),
  )
  draw(
    data(dat_rz) *
    mapping(:value; color=:curve) *
    density(; bandwidth=0.1);
  )
end
```

# Conditional modes

## Caterpillar plot

```{julia}
#| code-fold: true
#| label: fig-caterpillarm1
#| fig-cap: Prediction intervals of the subject random effects in model m1
cm1 = only(ranefinfo(m_prm1))
caterpillar!(Figure(; resolution=(800, 1200)), cm1; orderby=2)
```

## Shrinkage plot

### Log-transformed reaction times (LMM `m_prm1`)

```{julia}
#| code-fold: true
#| label: fig-caterpillarm1L
#| fig-cap: Shrinkage plots of the subject random effects in model m1L
shrinkageplot!(Figure(; resolution=(1000, 1200)), m_prm1)
```

# Parametric bootstrap

Here we

  - generate a bootstrap sample
  - compute shortest covergage intervals for the LMM parameters
  - plot densities of bootstrapped parameter estimates for residual, fixed effects, variance components, and correlation parameters

## Generate a bootstrap sample

We generate 2500 samples for the 15 model parameters (4 fixed effect, 7 VCs, 15 CPs, and 1 residual).

```{julia}
samp = parametricbootstrap(MersenneTwister(1234321), 2500, m_prm1;
                           optsum_overrides=(; ftol_rel=1e-8));
```

```{julia}
tbl = samp.tbl
```

## Shortest coverage interval

```{julia}
confint(samp)
```

We can also visualize the shortest coverage intervals for fixed effects with the `ridgeplot()` command:

```{julia}
#| code-fold: true
#| label: fig-bsridgem1
#| fig-cap: Ridge plot of fixed-effects bootstrap samples from model m1L
ridgeplot(samp; show_intercept=false)
```

## Comparative density plots of bootstrapped parameter estimates

### Residual

```{julia}
#| code-fold: true
#| label: fig-sigmadensitym1
#| fig-cap: '  Kernel density estimate from bootstrap samples of the residual standard  deviation for model m_prm1'
draw(
  data(tbl) *
  mapping(:σ => "Residual") *
  density();
  figure=(; resolution=(800, 400)),
)
```

### Fixed effects and associated variance components (w/o GM)

The shortest coverage interval for the `GM` ranges from x to x ms and the associate variance component from .x to .x. To keep the plot range small we do not include their densities here.

```{julia}
#| code-fold: true
#| label: fig-betadensitym1
#| fig-cap: '  Kernel density estimate from bootstrap samples of the fixed effects for model  m_prm1'
rn = renamer([
  "(Intercept)" => "GM",
  "CTR: sod" => "spatial effect",
  "CTR: dos" => "object effect",
  "CTR: dod" => "attraction effect",
  "(Intercept), CTR: sod" => "GM, spatial",
  "(Intercept), CTR: dos" => "GM, object",
  "CTR: sod, CTR: dos" => "spatial, object",
  "(Intercept), CTR: dod" => "GM, attraction",
  "CTR: sod, CTR: dod" => "spatial, attraction",
  "CTR: dos, CTR: dod" => "object, attraction",
])
draw(
  data(tbl) *
  mapping(
    [:β02, :β03, :β04] .=> "Experimental effect size [ms]";
    color=dims(1) => 
    renamer(["spatial effect", "object effect", "attraction effect"]) =>
    "Experimental effects",
  ) *
  density();
  figure=(; resolution=(800, 350)),
)
```

The densitiies correspond nicely with the shortest coverage intervals.

```{julia}
#| code-fold: true
#| label: fig-sigmasdensitym1
#| fig-cap: '  Kernel density estimate from bootstrap samples of the standard deviations for  model m1L (excluding Grand Mean)'
draw(
  data(tbl) *
  mapping(
    [:σ2, :σ3, :σ4] .=> "Standard deviations [ms]";
    color=dims(1) =>
    renamer(["spatial effect", "object effect", "attraction effect"]) =>
    "Variance components",
  ) *
  density();
  figure=(; resolution=(800, 350)),
)
```

The VC are all very nicely defined.

### Correlation parameters (CPs)

```{julia}
#| code-fold: true
#| label: fig-corrdensitym1
#| fig-cap: '  Kernel density estimate from bootstrap samples of the standard deviations for  model m1L'
draw(
  data(tbl) *
  mapping(
    [:ρ01, :ρ02, :ρ03, :ρ04, :ρ05, :ρ06] .=> "Correlation";
    color=dims(1) =>
    renamer(["GM, spatial", "GM, object", "spatial, object",
    "GM, attraction", "spatial, attraction", "object, attraction"]) =>
    "Correlation parameters",
  ) *
  density();
  figure=(; resolution=(800, 350)),
)
```

Three CPs stand out positively, the correlation between GM and the spatial effect, GM and attraction effect, and the correlation between spatial and attraction effects.
The second CP was positive, but not significant in the first study.
The third CP replicates a CP that was judged questionable in script `kwdyz11.jl`.

The three remaining CPs are not well defined for log-transformed reaction times; they only fit noise and should be removed.
It is also possible that fitting the complex experimental design (including target size and rectangle orientation) will lead to more acceptable estimates.
The corresponding plot based on LMM `m1_rt` for raw reaction times still shows them with very wide distributions, but acceptable.

# References

::: {#refs}
:::
